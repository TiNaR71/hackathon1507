<?php

namespace app\controllers;

use app\models\Objects;
use Yii;
use yii\filters\AccessControl;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\Response;
use yii\filters\VerbFilter;
use app\models\LoginForm;
use app\models\ContactForm;

class ApiController extends Controller
{
    public function behaviors()
    {
        $behaviors = parent::behaviors();

        // add CORS filter
        $behaviors['corsFilter'] = [
            'class' => \yii\filters\Cors::className(),
            'cors' => [
                'Origin' => ['*'],
                'Access-Control-Request-Method' => ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
                'Access-Control-Allow-Credentials' => false,
                'Access-Control-Request-Headers' => ['*']
            ]
        ];


        unset($behaviors['authenticator']);

        return $behaviors;
    }
    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionGetFilter() {
        $cache = Yii::$app->cache;
        $cache_key = 'get-filter-city';
        $filter = $cache->get($cache_key);
        if(empty($filter)) {
            $array = ArrayHelper::getColumn(Objects::find()->select(['rooms_count', 'parking', 'class', 'territory', 'commerce', 'ceiling', 'material', 'districts', 'object', 'floor_number', 'humanized_ready_date', 'full_price as price', 'square'])->all(), function ($row) {
                return $row->getAttributes();
            });
            $filter = [];
            foreach ($array as $element) {
                foreach ($element as $k => $v) {
                    if (!empty($v)) {
                        if (!isset($filter[$k])) $filter[$k] = [];
                        if (isset($filter[$k])) {
                            if (json_decode($v) != $v && !empty(json_decode($v))) {
                                $oldVal = $v;
                                $temp_val = json_decode($v, true);
                                if (is_array($temp_val)) $v = implode(', ', array_values($temp_val));
                                else $v = $temp_val;
                                if ($k == 'square') $v = (float)$v;
                            }
                            if (!in_array($v, $filter[$k])) $filter[$k][] = $v;
                        }
                    }
                }
            }
            if (isset($filter['floor_number'])) sort($filter['floor_number']);

            if (isset($filter['humanized_ready_date'])) usort($filter['humanized_ready_date'], function ($a, $b) {
                if ($a == $b) return 0;
                $tmp_a = explode(' ', $a);
                $tmp_b = explode(' ', $b);
                if (count($tmp_a) == 1) return -1;
                elseif (count($tmp_b) == 1) return 1;
                else {
                    if ($tmp_a[2] < $tmp_b[2]) return -1;
                    elseif ($tmp_a[2] == $tmp_b[2]) {
                        if ($tmp_a[0] < $tmp_b[0]) return -1;
                        else return 1;
                    } else return 1;
                }
            });
            if (isset($filter['price'])) {
                $filter['price'] = [
                    'min' => min($filter['price']),
                    'max' => max($filter['price']),
                ];
            }
            if (isset($filter['square'])) {
                $filter['square'] = [
                    'min' => min($filter['square']),
                    'max' => max($filter['square']),
                ];
            }
            $cache->set($cache_key, $filter, 10 * 60);
        }
        return $this->asJson($filter);
    }
    public function actionSearch() {

        $cache = Yii::$app->cache;
        $cache_key = implode('_', ['cache', 'search', md5(json_encode($_GET))]);
        Yii::debug($cache_key);
        $array = $cache->get($cache_key);
        if(empty($array)) {
            $room = $price_min = $price_max = $square_min = $square_max = $districts = $objects = $address = $class = $ready = $lastId = false;

            if (isset($_GET['room'])) $room = array_values($_GET['room']);
            if (isset($_GET['price'])) {
                $price = json_decode($_GET['price']);
                $price_min = $price->min;
                $price_max = $price->max;
            }
            if (isset($_GET['square'])) {
                $square = json_decode($_GET['square']);
                $square_min = $square->min;
                $square_max = $square->max;
            }
            if (isset($_GET['districts'])) $districts = array_values($_GET['districts']);
            if (isset($_GET['objects'])) $objects = array_values($_GET['objects']);
            if (isset($_GET['address'])) $address = $_GET['address'];
            if (isset($_GET['class'])) $class = array_values($_GET['class']);
            if (isset($_GET['ready'])) $ready = array_values($_GET['ready']);
            $limit = 20;
            $offset = 0;
            if (isset($_GET['lastId'])) $lastId = $_GET['lastId'];

            $query = Objects::find();
            if ($room) $query->andWhere(['IN', 'rooms_count', $room]);
            if ($price) $query->andWhere(['>=', 'full_price', $price_min])->andWhere(['<=', 'full_price', $price_max]);
            if ($square) $query->andWhere(['>=', 'square', $square_min])->andWhere(['<=', 'square', $square_max]);
            if ($districts) $query->andWhere(['IN', 'districts', $districts]);
            if ($objects) $query->andWhere(['IN', 'object', $objects]);
            if ($address) $query->andWhere(['LIKE', 'address', $address]);
            if ($class) $query->andWhere(['IN', 'class', $class]);
            if ($ready) $query->andWhere(['IN', 'humanized_ready_date', $ready]);
            $count = $query->count();
            if (!empty($lastId)) $query->andWhere(['>', 'id', $lastId]);
            $response = [];
            foreach ($query->limit($limit)->offset($offset)->orderBy('id')->all() as $object) {
                $response[$object->id] = $object->getAttributes();
            }
            $array = ['found' => $count, 'elements' => array_values($response)];
            $cache->set($cache_key, $array, 10 * 60);
        }
        return $this->asJson($array);
    }
}
